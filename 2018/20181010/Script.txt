안녕하세요 컴퓨터공학과 15학번 김경훈입니다.
저는 5장에서 Section 2 교착 상태의 해결방법에 대한 발표를 맡았는데 이중 교착 상태의 예방에 대해 집중적으로 설명하도록 하겠습니다.

우선 교착상태의 해결에 대해 알아보기 전에, 이 교착상태가 뭔지부터 설명하도록 하겠습니다
그림을 보시면 프로세스1이 리소스1을 사용하고 있고, 프로세스2는 리소스2를 사용하고 있습니다. 이런 환경에서 프로세스 1은 다음 작업을 위해 리소스2를 요구하고, 프로세스 2는 리소스 1을 요구하면서 다음 작업을 이어나가지 못하고 있습니다.
이렇게 둘 이상의 프로세스가 각자 서로 점유한 자원을 요구하면서 무한정 대기 상태로 돌입하는 것을 교착 상태라고 할 수 있습니다.


이런 교착 상태를 해결하는 방법에는 예방, 회피, 회복과 탐지가 있습니다.(예방은 밑에서 다루기에 우선 생략)
이 중 회피, 그리고 회복과 탐지의 경우 교착 상태의 발생 가능성을 인정하고, 발생을 막는 알고리즘을 적용하여 해결하거나,
(책의 경우 은행가 알고리즘)
교착 상태가 발생하는 걸 허용한 다음에 회복시키는 방법입니다.
이 세 가지 방법 중 저는 교착 상태의 예방에 대하여 집중적으로 알아보도록 하겠습니다.

교착 상태의 예방은 말그대로 교착 상태가 발생하지 않도록 막아버리는 것인데요, 그 전에
교착 상태의 발생 조건을 알아보도록 하겠습니다.
교착 상태의 발생 조건은 상호 배제 조건, 점유와 대기 조건, 비선점 조건, 순환 대기 조건이 있는데요. 이 조건중 하나라도 충족하지 않는다면 교착 상태는 발생하지 않습니다. 따라서 이 조건들을 하나씩 제거하는 것이, 교착 상태의 예방 방법이라고 할 수 있습니다.     이 조건에 대한 자세한 설명은 아래에서 다시 하도록 하겠습니다.

1. 상호 배제 조건방지
병행 프로세스에서 상호 배제란, 프로세스 하나가 공유 자원을 사용 시, 다른 프로세스가 동일한 일을 하지 못하게 하는 것입니다. 
그렇기 때문에 상호 배제 조건을 허용하면, 한 자원에 대해 여러 프로세스가 동시에 접근할 수 없게 되기 때문에, 교착 상태를 야기하게 됩니다. 그러므로 이 상호 배제 조건을 제거하여, 여러개의 프로세스가 동시에 한 자원에 접근할 수 있도록 하는 것이 교착 상태를 예방하는 방법 중 하나라고 할 수 있겠습니다.

ppt에도 나왔던 강 건너기 예를 보시겠습니다.
두 사람을 각각 하나의 프로세스로 본다면 각자 돌 - 여기서는 프로세스가 점유한 자원이 되겠죠. - 을 밟고 있기때문에 서로 비켜주기를 기다리고 있는 교착상태가 됩니다. 한 돌을 한 사람밖에 밟을 수 없기 때문에 일어나는 일이죠. 하지만 한 돌을 두 사람이 밟을 수 있게 해준다면, 두 사람이 서로 교차해서 지나갈 수 있게 됩니다. 즉, 교착 상태가 일어나지 않게 됩니다. 이처럼 '한 자원, 즉 돌에 프로세스, 즉 한 사람만 접근할 수 있다'는 상호 배제 조건을 해제해 준다면 교착상태를 예방할 수 있습니다.


2. 점유와 대기 조건 방지
점유와 대기 조건이란 어떤 프로세스가, 자신이 최소 하나 이상의 자원을 점유하고 있으면서, 다른 프로세스가 사용중인 자원을 추가로 대기하기 위해 대기하는 프로세스가 있다는 것입니다.
즉, 자신이 자원을 가지고 있으면서도, 다른 프로세스가 사용중인 자원을 요구하는 프로세스가 있다면 교착 상태가 일어날 수 있다는 것입니다. (실제로 교착 상태는, 여러 프로세스가 서로가 점유한 자원을 요구하기에 발생하기 떄문에, 요구할 일을 사전에 차단하는 것입니다)
이럴 때는 프로세스 실행 전에 그 프로세스가 필요한 모든 자원을 한번에 할당해 준다면, 다른 프로세스의 자원을 요구할 일이 없기 때문에 교착 상태를 예방할 수 있게 됩니다.

강 건너기 예로 보시면, 프로세스 실행 전, 즉 아예 두 사람이 다리를 건너기 전에 먼저 왼쪽 사람, 즉 한 프로세스에게 먼저 모든 돌을 할당해 줘서 건너게 하고, 건넌 다음에 다른 프로세스에게 모든 돌을 할당해 주어 건너게 하는 방식입니다. 즉 이런 경우, 한 사람이 다른 사람이 밟고 있는 돌을 건너기 위해 요구할 필요가 없어지게 되기 때문에, 교착 상태를 예방할 수 있습니다.


3. 비선점 조건 방지
비선점 조건이란, 한 프로세스가 어떤 자원의 사용을 끝낼 때 까지, 다른 프로세스가 그 자원을 뺏을 수 없게 해주는 것입니다.
따라서 두 개 이상의 프로세스가 서로 점유한 자원을 요구해도, 아직 그 자원의 사용을 끝마치지 않았기 때문에 그 자원을 가져갈 수 없게 하는 조건입니다. 그러면 그 프로세스들은 자기 자원을 내주지도, 그렇다고 상대방의 자원을 뺏어갈 수도 없기 때문에 교착 상태에 빠지게 되는 것입니다.
이로 인한 교착 상태를 자원을 점유한 프로세스가 다른 프로세스의 자원을 요구할 때 자기가 가지고 있는 자원을 반납하고 요구한 자원을 사용할 수 있을때까지 기다리게 해야 합니다. 이 설명은 다시 강건너기 예를 들어 보여드리겠습니다.

왼쪽의 있는 사람, P1은 강을 건너기 위해 P2가 점유중인 R2돌을 요구합니다. 하지만 오른쪽 사람 P2도 강을 건너기 위해 P1이 점유중인 R1을 요구하면서 교착 상태에 빠집니다. 이때 비선점 요구를 방지해 준다면, P1은 R2를 요구하고 대기 상태로 돌입할 때, 자신이 점유중인 R1을 반납하고 돌아가게 됩니다. 그러면 P2는 R1이 반납되었기 때문에 무사히 강을 건너고, P2가 자원을 사용하고 나자 P1은 R1와 R2를 얻어 강을 건널 수 있게 됩니다. 이렇게 비선점 조건을 방지한다면 교착 상태를 예방할 수 있습니다.

비선점 조건을 방지하여 교착 상태를 예방하는 것은 이런 방법도 있지만, 프로세스마다 우선 순위를 매겨, 우선 순위가 높은 프로세스가 자원을 먼저 점유할 수 있도록 하게 하는 방법도 있습니다.

4. 순환 대기 조건 방지.

순환 대기란, 각 프로세스가 순환적으로 다음 프로세스가 점유한 자원을 요구하는 것을 말합니다. 그림을 보시면, P0은 R1을 요구하고 P1는 R2를 요구하고 P2는 R3를 요구하고.. 계속 이렇게 순환식으로 다음 프로세스의 자원을 요구하고 마지막 P3은 P0의 자원을 요구하는 형식입니다. 이런 교착 상태를 순환 대기의 교착 상태라고 합니다. 이때 순환 대기 조건은 비선점 조건과, 점유와 대기 조건을 모두 만족할 때 발생합니다.
이러한 순환 대기 교착 상태를 예방하려면, 자원에 고유한 번호를 할당하여 번호 순서대로 자원을 요구하도록 하는 방법이 있습니다.
모든 자원에 일련의 순서를 부여하여 각 프로세스들이 순환 구조가 아닌, 계층적 구조를 갖게 만들어 순환 대기 조건의 가능성을 제거하여 교착 상태를 예방하는 것입니다. 
하지만 다른 방법으로, 비선점 조건이나 점유와 대기 조건을 제거시켜 순환 대기가 애초에 일어나지 않게 하는 방법도 있습니다.
순환 대기 조건은 비선점 조건과 점유와 대기 조건을 '모두' 만족할떄 발생합니다.
그림을 보시면 P0은 R0을 점유하고 있음에도 R1를 점유하기 위해 대기 상태에 돌입하였습니다. 애초에 점유와 대기 조건을 제거시켜, 프로세스 실행 전 P0이 R0와 R1를 모두 점유하게 한다면, 이런 순환 대기는 일어나지 않습니다.
또 비선점 조건을 제거시켜, P0이 R1를 요구할 때 P1을 반납하고 대기 상태에 들어가게 한다면, P3가 R0을 점유할 수 있기 때문에 이 경우에도 순환 대기는 일어나지 않습니다.
이렇게 비선점 조건과 점유와 대기 조건을 차단하여 순환 대기의 가능성을 미연에 차단하여 교착 상태를 예방하는 방법도 있습니다.





